<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Qt字符串]]></title>
    <url>%2F2019%2F3%2F2%2FQtString%2F</url>
    <content type="text"><![CDATA[Qt String &#x7C7B;&#x5185;&#x5BB9;&#x5B57;&#x7B26;&#x4E32;&#x548C;&#x6570;&#x503C;&#x4E4B;&#x95F4;&#x7684;&#x8F6C;&#x6362;QString&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;&#x6570;&#x503C;&#x5BF9;&#x4E8E;&#x57FA;&#x672C;&#x7684;&#x6570;&#x503C;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x90FD;&#x80FD;&#x8FDB;&#x884C;&#x8F6C;&#x6362;1234567int toInt(bool *ok = Q_NULLPTR, int base = 10) constlong toLong(bool *ok = Q_NULLPTR, int base = 10) constshort toShort(bool *ok = Q_NULLPTR, int base = 10) constuint toUInt(bool *ok = Q_NULLPTR, int base = 10) constulong toULong(bool *ok = Q_NULLPTR, int base = 10) constdouble toDouble(bool *ok = Q_NULLPTR) constfloat toFloat(bool *ok = Q_NULLPTR) const &#x5F53;&#x8F6C;&#x6362;&#x6210;&#x529F;&#xFF0C;ok&#x7F6E;&#x4E3A;true&#xFF0C;&#x5426;&#x5219;&#x4E3A;false&#xFF0C;base&#x662F;&#x8FDB;&#x5236;&#x5927;&#x5C0F;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;&#x5341;&#x8FDB;&#x5236;&#x3002; &#x6570;&#x503C;&#x8F6C;&#x6362;&#x6210;&#x5B57;&#x7B26;&#x4E32;123456789QString::number(int n, int base = 10);QString::number(uint n, int base = 10);QString::number(ulong n, int base = 10);QString::number(qlonglong n, int base = 10);QString::number(qulonglong n, int base = 10);QString::number(double n, char format = &apos;g&apos;, int precision = 6);QString::asprintf(const char *cformat, ...);str.setNum(...);//&#x4E0E;QString::number&#x76F8;&#x540C;str.sprintf(...);//&#x4E0E;QString::asprintf&#x76F8;&#x540C; &#x5B57;&#x7B26;&#x4E32;&#x5E38;&#x7528;&#x65B9;&#x6CD5; append()&#x3001;prepend()append()&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x540E;&#x63D2;&#xFF0C;prepend()&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x524D;&#x63D2;&#x3002; toUpper()&#x3001;toLower()toUpper()&#x5C0F;&#x5199;&#x8F6C;&#x6362;&#x6210;&#x5927;&#x5199;&#xFF0C;toLower()&#x8F6C;&#x6210;&#x5C0F;&#x5199;&#x3002; count()&#x3001;size()&#x3001;length()&#x4E09;&#x4E2A;&#x90FD;&#x662F;&#x83B7;&#x53D6;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x4E00;&#x4E2A;&#x6C49;&#x5B57;&#x7B97;&#x4E00;&#x4E2A;&#x5B57;&#x8282; trimmed()&#x3001;simplified()trimmed()&#x53BB;&#x6389;&#x6574;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x524D;&#x540E;&#x7684;&#x7A7A;&#x683C;&#xFF0C;simplified()&#x53BB;&#x6389;&#x524D;&#x540E;&#x3001;&#x4E2D;&#x95F4;&#x7684;&#x7A7A;&#x683C;&#x3002; indexOf()&amp;lastIndexOf()indexOf(str&#xFF0C;from)&#x662F;&#x5728;&#x81EA;&#x8EAB;&#x5B57;&#x7B26;&#x4E32;&#x5185;&#x67E5;&#x627E;str&#xFF0C;&#x4ECE;from&#x5F00;&#x59CB;&#x67E5;&#x627E;&#xFF0C;&#x8FD4;&#x56DE;&#x6700;&#x5148;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#x3002;lastIndexOf(str, from)&#x8FD4;&#x56DE;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#x3002; isNull()&amp;isEmpty()isNull()&#x548C;isEmpty()&#x90FD;&#x662F;&#x5224;&#x65AD;&#x5B57;&#x7B26;&#x4E32;&#x4E3A;&#x7A7A;&#x3002;&#x5982;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x53EA;&#x6709;&#x201D;\0&#x201D;&#xFF0C;isNull&#x8FD4;&#x56DE;false&#xFF0C;isEmpty&#x8FD4;&#x56DE;true&#xFF0C;&#x672A;&#x8D4B;&#x503C;&#x7684;&#x5B57;&#x7B26;&#x4E32;isNull&#x624D;&#x8FD4;&#x56DE;true&#x3002; contains()&#x5224;&#x65AD;&#x7236;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5305;&#x542B;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8FD4;&#x56DE;true&amp;false&#x3002; endsWith()&amp;startsWith()startsWith(str)&#x5224;&#x65AD;&#x662F;&#x5426;&#x4EE5;str&#x5F00;&#x59CB;&#xFF0C;endsWith(str)&#x5224;&#x65AD;&#x662F;&#x5426;&#x4EE5;str&#x7ED3;&#x675F;&#x3002; left()&amp;right()left(num)&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x5DE6;&#x8FB9;&#x53D6;num&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;right(num)&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x53F3;&#x8FB9;&#x53D6;num&#x4E2A;&#x5B57;&#x7B26;&#x3002; section()section(sep, start, end)&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x63D0;&#x53D6;&#x4EE5;sep&#x4E3A;&#x5206;&#x9694;&#x7B26;&#xFF0C;&#x4ECE;start&#x7AEF;&#x5230;end&#x7AEF;&#x3002;&#x4F8B;&#x5982;&#xFF1A; 123QString s1 = &quot;shanghai, beijing, guangzhou, Hongkong&quot;, s2;s2 = s1.section(&quot;,&quot;, 0, 0)//s2 = &quot;shanghai&quot;s2 = s1.section(&quot;,&quot;, 1, 3)//s2 = &quot;beijing, guangzhou, Hongkong&quot; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Qt编程</category>
      </categories>
      <tags>
        <tag>Qt C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Qt全局定义]]></title>
    <url>%2F2019%2F1%2F29%2FQtGlobal%2F</url>
    <content type="text"><![CDATA[Qt&#x5168;&#x5C40;&#x5B9A;&#x4E49;&#x5185;&#x5BB9;&#x5728;&#x4E2D;&#x5B9A;&#x4E49;&#x4E86;&#x6709;&#x5173;Qt&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3001;&#x51FD;&#x6570;&#x3001;&#x5B8F;&#xFF0C;&#x6240;&#x6709;Qt&#x7C7B;&#x7684;&#x5934;&#x6587;&#x4EF6;&#x4E2D;&#x90FD;&#x6709;&#x5305;&#x542B;&#x8FD9;&#x4E2A;&#x5934;&#x6587;&#x4EF6;&#xFF0C;&#x4E0D;&#x540C;&#x5728;&#x8FDB;&#x884C;&#x6DFB;&#x52A0;&#x3002; Qt&#x6570;&#x636E;&#x7C7B;&#x578B;Qt&#x540C;&#x6837;&#x901A;&#x8FC7;typedef&#x5C06;&#x57FA;&#x672C;&#x7684;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x5305;&#x88C5;&#x3002; Qt&#x6570;&#x636E;&#x7C7B;&#x578B; &#x7B49;&#x6548;&#x5B9A;&#x4E49; &#x5B57;&#x8282;&#x5927;&#x5C0F; qint8 signed char 1 qint16 signed short 2 qint32 signed int 4 qint64 long long int 8 qlonglong long long int 8 quint8 unsigned char 1 quint16 unsigned short 2 quint32 unsigned int 4 quint64 unsigned long long int 8 qulonglong unsigned long long int 8 uchar unsigned char 1 ushort unsigned short 2 uint unsigned int 4 ulong unsigned long long int 8 qreal double 8 qfloat16 2 qreal&#x9ED8;&#x8BA4;&#x662F;double&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528;-qreal float&#x8FDB;&#x884C;&#x914D;&#x7F6E;&#xFF0C;&#x5219;&#x4E3A;4&#x4E2A;&#x5B57;&#x8282;&#x7684;float&#x7C7B;&#x578B;&#x3002; qfloat16&#x662F;Qt5.9.0&#x5F00;&#x59CB;&#x65B0;&#x589E;&#x7684;&#xFF0C;&#x8868;&#x793A;16&#x4F4D;&#x7684;&#x6D6E;&#x70B9;&#x6570;&#xFF0C;&#x4F7F;&#x7528;qfloat16&#x8981;&#x5305;&#x542B;&#x3002; Qt&#x51FD;&#x6570;&#x5934;&#x6587;&#x4EF6;&#x4E2D;&#x5305;&#x542B;&#x7684;&#x51FD;&#x6570;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x662F;&#x4EE5;&#x6A21;&#x677F;&#x7C7B;&#x578B;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x6A21;&#x677F;&#x7C7B;&#x578B;&#xFF0C;&#x4E5F;&#x6709;&#x4E00;&#x4E9B;&#x6570;&#x5B66;&#x51FD;&#x6570;&#x3002;|Qt&#x51FD;&#x6570;|&#x529F;&#x80FD;||&#x2014;&#x2014;&#x2014; |&#x2014;&#x2014;&#x2013;||T qAbs(const T &amp;value)|&#x8FD4;&#x56DE;&#x53D8;&#x91CF;value&#x7684;&#x7EDD;&#x5BF9;&#x503C;||bool qFuzzyCompare(double p1,double p2)|&#x82E5;p1&#x8FD1;&#x4F3C;&#x7B49;&#x4E8E;p2&#xFF0C;&#x8FD4;&#x56DE;true||bool qFuzzyIsNull(double d)|&#x5982;&#x679C;d&#x7EA6;&#x7B49;&#x4E8E;0&#xFF0C;&#x8FD4;&#x56DE;true||const T &amp;qMin(const T &amp;value1, const T &amp;value2)|&#x8FD4;&#x56DE;value1&#x548C;value2&#x4E2D;&#x7684;&#x6700;&#x5C0F;&#x503C;||const T&amp;qMax(const T&amp;value1, const T&amp;value2)|&#x8FD4;&#x56DE;value1&#x548C;value2&#x4E2D;&#x7684;&#x6700;&#x5927;&#x503C;||int qrand()|&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x6570;||void qsrand(uint seed)|&#x4EE5;seed&#x4E3A;&#x521D;&#x59CB;&#x5316;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x6570;| Qt&#x5B8F;&#x5B9A;&#x4E49; QT_VERSION&#x8FD9;&#x4E2A;&#x5B8F;&#x5C55;&#x5F00;&#x6570;&#x503C;&#x4E3A;0xMMNNPP(MM=major, NN=minor, PP=patch)&#xFF0C;&#x6307;&#x7684;&#x662F;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x7248;&#x672C;&#x53F7;&#x3002;&#x4F8B;&#x5982;&#xFF1A;Qt5.12.1&#x2013;&gt;0x051201&#x3002; QT_VERSION_CHECK&#x8BE5;&#x5B8F;&#x5C55;&#x5F00;&#x662F;&#x7248;&#x672C;&#x53F7;&#x7684;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A; 123456#include &lt;QtGlobal&gt;#if (QT_VERSION &gt;= QT_VERSION_CHECK(5, 0, 0))#include &lt;QtWidgets&gt;#else#include &lt;QtGui&gt;#endif QT_VERSION_STR &#x8BE5;&#x5B8F;&#x5C55;&#x5F00;&#x662F;Qt&#x7248;&#x672C;&#x53F7;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4F8B;&#x5982;&#x201D;5.9.0&#x201D; Q_BYTE_ORDER&#x3001;Q_BIG_ENDIAN&#x3001;Q_LITTLE_ENDIAN Q_BYTE_ORDER&#x8868;&#x793A;&#x7CFB;&#x7EDF;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x5B57;&#x8282;&#x5E8F;&#xFF0C;Q_BIG_ENDIAN&#x662F;&#x5927;&#x7AEF;&#x5B57;&#x8282;&#x5E8F;&#xFF0C;Q_LITTLE_ENDIAN&#x662F;&#x5C0F;&#x7AEF;&#x5B57;&#x8282;&#x5E8F;&#x3002;&#x4F8B;&#x5982;&#xFF1A;123#if Q_BYTE_ORDER == Q_BIG_ENDIAN&#x2026;&#x2026;&#x2026;&#x2026;#endif Q_NULLPTR Qt&#x91CD;&#x5B9A;&#x4E49;&#x7684;nullptr&#x6307;&#x9488;&#x3002; Q_DECL_OVERRIDE &#x5728;&#x7C7B;&#x7684;&#x5B9A;&#x4E49;&#x4E2D;&#xFF0C;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x91CD;&#x8F7D;&#x865A;&#x51FD;&#x6570;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x8BE5;&#x5B8F;&#x3002;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x8BE5;&#x5B8F;&#x4E4B;&#x540E;&#xFF0C;&#x5BF9;&#x8981;&#x91CD;&#x8F7D;&#x7684;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x4EFB;&#x4F55;&#x91CD;&#x8F7D;&#x64CD;&#x4F5C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x62A5;&#x9519;&#x3002; Q_DECL_FINAL &#x5BF9;&#x7C7B;&#x4E2D;&#x7684;&#x865A;&#x51FD;&#x6570;&#x8FDB;&#x884C;final&#x5904;&#x7406;&#xFF0C;&#x8868;&#x793A;&#x4E0D;&#x80FD;&#x518D;&#x91CD;&#x8F7D;&#x3002;&#x8BE5;&#x5B8F;&#x5BF9;&#x7C7B;&#x4E5F;&#x6709;&#x6548;&#x679C;&#x3002;12class MyBrain Q_DECL_FINAL {//MyBrian&#x5C06;&#x4E0D;&#x4F1A;&#x88AB;&#x5176;&#x5B83;&#x7C7B;&#x7EE7;&#x627F;}; Q_UNUSED(name) &#x8BE5;&#x5B8F;&#x7528;&#x5728;&#x51FD;&#x6570;&#x4E2D;&#x5B9A;&#x4E49;&#x4E0D;&#x5728;&#x51FD;&#x6570;&#x4F53;&#x5185;&#x4F7F;&#x7528;&#x7684;&#x53C2;&#x6570;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5F53;&#x53C2;&#x6570;&#x5728;&#x51FD;&#x6570;&#x4F53;&#x5185;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#xFF0C;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x7F16;&#x8BD1;&#x5668;&#x62A5;&#x8B66;&#x544A;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x8FD9;&#x4E2A;&#x5B8F;&#x3002; forever forever&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65E0;&#x9650;&#x5FAA;&#x73AF; qDebug(const char *message) &#x7528;&#x6765;&#x8C03;&#x8BD5;&#x7A0B;&#x5E8F;&#x8F93;&#x51FA;&#x65F6;&#x4F7F;&#x7528;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Qt编程</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows Socket]]></title>
    <url>%2F2019%2F1%2F27%2Fwindows-Socket%2F</url>
    <content type="text"><![CDATA[Windows socket&#x7F16;&#x7A0B;&#x57FA;&#x7840;&#x4E00;&#x3001;Winsock&#x521D;&#x59CB;&#x5316;&#x5728;&#x8FDB;&#x884C;winsock&#x7F16;&#x7A0B;&#x524D;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x8C03;&#x7528;WSAStartup&#x51FD;&#x6570;&#xFF0C;&#x8BBE;&#x7F6E;&#x5F53;&#x524D;&#x7684;winsock&#x7684;&#x7248;&#x672C;&#x548C;&#x521D;&#x59CB;&#x5316;&#x76F8;&#x5BF9;&#x5E94;&#x7248;&#x672C;&#x7684;&#x5E93;&#x3002; 12#include &lt;winsock2.h&gt;int WSAStartup(WORD wVersionRequested, LPWSADATA, lpWSAData); wVersionRequested&#xFF1A;&#x5F53;&#x524D;&#x6240;&#x4F7F;&#x7528;&#x7684;winsock&#x7248;&#x672C;&#x4FE1;&#x606F;&#x3002;&#x4F7F;&#x7528;MAKEWORD()&#x51FD;&#x6570;&#xFF0C;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x53F7;&#xFF0C;&#x526F;&#x7248;&#x672C;&#x53F7;&#x4E3A;&#x9AD8;&#x4F4D;&#xFF0C;&#x4E3B;&#x7248;&#x672C;&#x53F7;&#x4E3A;&#x4F4E;&#x4F4D;&#xFF0C;&#x5982;&#x7248;&#x672C;&#x53F7;&#x4E3A;2.1&#xFF0C;&#x5219;MAKEWORD(1,2)&#xFF0C;&#x8FD4;&#x56DE;0x0102&#x3002; lpWSAData&#xFF1A;WSAData&#x7ED3;&#x6784;&#x4F53;&#x53D8;&#x91CF;&#x6307;&#x9488; return&#xFF1A;0&#x6210;&#x529F;&#xFF0C;&#x975E;0&#x5931;&#x8D25; &#x5F53;&#x8981;&#x6CE8;&#x9500;&#x8BE5;&#x5E93;&#x65F6;&#x4F7F;&#x7528;&#x51FD;&#x6570;WSACleanup(void);&#xFF0C;&#x6210;&#x529F;&#x8FD4;&#x56DE;0&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;SOCKET_ERROR&#x3002; &#x4E8C;&#x3001;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x4E4B;&#x95F4;&#x7684;&#x8F6C;&#x6362;&#x7F51;&#x7EDC;&#x4E0E;&#x672C;&#x4F4E;&#x5B57;&#x8282;&#x5E8F;&#x7684;&#x8F6C;&#x6362;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x5F53;&#x4E2D;&#xFF0C;&#x6839;&#x636E;cpu&#x6216;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7684;&#x4E0D;&#x540C;&#x53EF;&#x5206;&#x4E3A;&#x5927;&#x7AEF;&#x5B58;&#x50A8;(Big Endian)&#x548C;&#x5C0F;&#x7AEF;&#x5B58;&#x50A8;(Little Endian)&#x3002; &#x5927;&#x7AEF;&#x5B58;&#x50A8;&#xFF1A;&#x9AD8;&#x4F4D;&#x5B57;&#x8282;&#x5B58;&#x653E;&#x5230;&#x5730;&#x4F4D;&#x5730;&#x5740;&#x5C0F;&#x7AEF;&#x5B58;&#x50A8;&#xFF1A;&#x9AD8;&#x4F4D;&#x5B57;&#x8282;&#x5B58;&#x653E;&#x5230;&#x9AD8;&#x4F4D;&#x5730;&#x5740; &#x5B57;&#x8282;&#x5E8F;&#x8F6C;&#x6362;&#x51FD;&#x6570;1234unsigned short htos(unsigned short);unsigned short ntoh(unsigned short);unsigned long htol(unsigned long);unsigned long ntoh(unsigned long); h&#x4EE3;&#x8868;&#x4E3B;&#x673A;(host)&#x5B57;&#x8282;&#x5E8F;&#xFF0C;n&#x4EE3;&#x8868;&#x7F51;&#x7EDC;(network)&#x5B57;&#x8282;&#x5E8F;&#x3002; &#x5728;windows&#x5E73;&#x53F0;&#x4E0B;&#xFF0C;&#x5927;&#x90E8;&#x5206;&#x91C7;&#x7528;&#x5927;&#x7AEF;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x4EE5;&#x5C0F;&#x7AEF;&#x6CD5;&#x65B9;&#x5F0F;&#x4F20;&#x8F93;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x63A5;&#x6536;&#x65F6;&#x8981;&#x8FDB;&#x884C;&#x5B57;&#x8282;&#x5E8F;&#x7684;&#x8F6C;&#x6362;&#x3002; &#x5B57;&#x7B26;&#x4E32;&#x8DDF;IP&#x5730;&#x5740;&#x4E4B;&#x95F4;&#x7684;&#x8F6C;&#x6362;&#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x5230;IP&#x5728;SOCKADDR_IN&#x7684;sin_addr&#x4E2D;&#x4FDD;&#x5B58;&#x7684;&#x662F;32&#x4F4D;&#x6574;&#x6570;&#x578B;&#xFF0C;&#x800C;&#x4EBA;&#x4E3A;&#x6DFB;&#x52A0;&#x7684;IP&#x662F;&#x4E00;&#x4E2A;&#x70B9;&#x5206;&#x5341;&#x8FDB;&#x5236;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x8F6C;&#x6362;&#x624D;&#x80FD;&#x4F7F;IP&#x5730;&#x5740;&#x88AB;&#x4F20;&#x9012;&#x5230;SOCKADDR_IN&#x7684;&#x53D8;&#x91CF;&#x4E2D;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x6240;&#x8C13;&#x7684;&#x7F51;&#x7EDC;&#x5B57;&#x8282;&#x5E8F;&#x7684;&#x8F6C;&#x6362;&#x3002; 123//windows platform#include &lt;WinSock2.h&gt;unsigned long inet_addr(const char *string); return&#xFF1A;&#x6210;&#x529F;&#x65F6;&#x8FD4;&#x56DE;32&#x4F4D;&#x5C0F;&#x7AEF;&#xFF08;&#x6216;&#x5927;&#x7AEF;&#xFF09;&#x5E8F;&#x6574;&#x6570;&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;INADDR_NONE &#x4ECE;IP&#x8F6C;&#x6362;&#x5230;&#x5B57;&#x7B26;&#x4E32;&#x6709;&#x65F6;&#x5019;&#x9700;&#x8981;&#x83B7;&#x53D6;&#x5230;&#x4ECE;&#x7F51;&#x7EDC;&#x5F53;&#x4E2D;&#x83B7;&#x5F97;&#x7684;IP&#x5730;&#x5740;&#x5E76;&#x901A;&#x8FC7;&#x70B9;&#x5206;&#x5341;&#x8FDB;&#x5236;&#x663E;&#x793A;&#x51FA;&#x6765;&#x3002;&#x5728;Windows&#x5E73;&#x53F0;&#x4E0A;&#x53EA;&#x6709;inet_ntoa()&#xFF0C;&#x6CA1;&#x6709;inet_aton()&#x3002; 123//windows platform#include &lt;WinSock2.h&gt;char* inet_ntoa(struct in_addr adr); in&#xFF1A;&#x5177;&#x6709;&#x6574;&#x578B;IP&#x5730;&#x5740;&#x7684;in_addr&#x53D8;&#x91CF;&#x3002; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;-1&#x3002; &#x793A;&#x4F8B;12345678910111213141516/*inet_addr&#x7528;&#x4F8B;*/{ char *ip_str1 = &quot;192.168.0.1&quot;; SOCKADDR_IN sockaddr; //&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x8F6C;&#x6362;&#x6210;&#x6574;&#x6570; sockaddr.sin_addr.s_addr = inet_addr(ip_str1);}/*inet_ntoa&#x7528;&#x4F8B;*/{ SOCKADDR_IN sockaddr; char ip_str[20]; sockaddr.sin_addr.s_addr = htonl(0x02030104); ip_str = inet_ntoa(sockaddr.sin_addr);} WinSock2&#x81EA;&#x5E26;&#x8F6C;&#x6362;&#x51FD;&#x6570;WSAStringToAddress&amp;WSAAddressToString&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x529F;&#x80FD;&#x8DDF;inet_ntoa,inet_addr&#x4E00;&#x81F4;&#xFF0C;&#x652F;&#x6301;IPv4&#x548C;IPv6&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x652F;&#x6301;&#x8DE8;&#x5E73;&#x53F0;&#xFF0C;&#x517C;&#x5BB9;&#x6027;&#x5DEE;&#x3002; WSAStringToAddress12345678#include &lt;WinSock2.h&gt;INT WSAStringToAddress( _In_ LPWSTR AddressString, _In_ INT AddressFamily, _In_opt_ LPWSAPROTOCOL_INFOW lpProtocolInfo, _Out_writes_bytes_to_(*lpAddressLength,*lpAddressLength) LPSOCKADDR lpAddress, _Inout_ LPINT lpAddressLength) AddressString&#xFF1A;&#x542B;&#x6709;&#x7AEF;&#x53E3;&#x53F7;&#x548C;ip&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002; AddressFamily&#xFF1A;&#x5730;&#x5740;&#x534F;&#x8BAE;&#x65CF;&#x3002; lpProtocolInfo&#xFF1A;&#x8BBE;&#x7F6E;&#x534F;&#x8BAE;&#x63D0;&#x4F9B;&#x8005;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;NULL&#x3002; lpAddress&#xFF1A;&#x4FDD;&#x5B58;&#x5730;&#x5740;&#x4FE1;&#x606F;&#x7684;SOCKADDR&#x53D8;&#x91CF;&#x3002; lpAddressLength&#xFF1A;lpAddress&#x957F;&#x5EA6;&#x7684;&#x6307;&#x9488;&#x3002; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;0&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;SOCKET_ERROR&#x3002; WSAAddressToString1234567INT WSAAddressToString( _In_reads_bytes_(dwAddressLength) LPSOCKADDR lpsaAddress, _In_ DWORD dwAddressLength, _In_opt_ LPWSAPROTOCOL_INFOW lpProtocolInfo, _Out_writes_to_(*lpdwAddressStringLength,*lpdwAddressStringLength) LPWSTR lpszAddressString, _Inout_ LPDWORD lpdwAddressStringLength) lpsaAddress&#xFF1A;&#x9700;&#x8981;&#x8F6C;&#x6362;&#x7684;&#x5730;&#x5740;&#x4FE1;&#x606F;&#x7684;SOCKADDR&#x53D8;&#x91CF;&#x3002; dwAddressLength&#xFF1A;lpsaAddress&#x957F;&#x5EA6;&#x7684;&#x6307;&#x9488;&#x3002; lpProtocolInfo&#xFF1A;&#x8BBE;&#x7F6E;&#x534F;&#x8BAE;&#x63D0;&#x4F9B;&#x8005;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;NULL&#x3002; lpszAddressString&#xFF1A;&#x4FDD;&#x5B58;&#x8F6C;&#x6362;&#x7ED3;&#x679C;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002; lpdwAddressStringLength&#xFF1A;lpszAddressString&#x5B58;&#x6709;&#x5730;&#x5740;&#x4FE1;&#x606F;&#x7684;&#x957F;&#x5EA6;&#x3002; &#x793A;&#x4F8B;123456789101112131415161718/*WSAStringToAddress&#x7528;&#x4F8B;*/{ char *ip_str = &quot;192.168.0.1:9090&quot;; SOCKADDR_IN sockaddr; int socklen = sizeof(sockaddr); //&#x5C06;&#x5B57;&#x7B26;&#x4E32;IP&#x8F6C;&#x6362;&#x6210;socket&#x5730;&#x5740; WSAStringToAddress(ip_str, AF_INET, NULL, (SOCKADDR*)&amp;sockaddr, &amp;socklen);}/*WSAAddressToString&#x7528;&#x4F8B;*/{ char ip_str[30]; //sockaddr&#x5177;&#x6709;IP&#x5730;&#x5740;&#x548C;&#x7AEF;&#x53E3;&#x53F7;&#x4FE1;&#x606F; SOCKADDR_IN sockaddr; int socklen = sizeof(sockaddr); int ip_buf_len = sizeof(ip_str); WSAAddressToString((SOCKADDR*)&amp;sockaddr, &amp;socklen, NULL, ip_str, &amp;ip_buf_len);} &#x4E09;&#x3001;Windows socket&#x76F8;&#x5173;&#x51FD;&#x6570;&#x8FDE;&#x63A5;&#x76F8;&#x5173;&#x7684;&#x51FD;&#x6570;&#x90FD;&#x5728;WinSock2.h&#x4E2D;.1SOCKET socket(int af, int type, int protocol); af&#xFF1A;&#x534F;&#x8BAE;&#x65CF;&#xFF0C;IPv4(AF_INET)&#x6216;IPv6 type&#xFF1A;socket&#x7C7B;&#x578B;&#xFF0C;SOCK_STREAM, SOCKET_DGRAM, SOCK_RAW protocol&#xFF1A;socket&#x4F7F;&#x7528;&#x7684;&#x7279;&#x5B9A;&#x534F;&#x8BAE;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E3A;0 return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x5957;&#x63A5;&#x5B57;&#x53E5;&#x67C4;&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;INVALID_SOCKET 1int bind(SOCKET s, const struct sockaddr * name, int namelen); s&#xFF1A;socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; name&#xFF1A;SOCKADDR&#x7C7B;&#x578B;&#x7684;&#x6307;&#x9488;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF0C;&#x5C06;SOCKADDR_IN&#x8F6C;&#x6210;SOCKADDR&#x3002; namelen&#xFF1A;name&#x7684;&#x957F;&#x5EA6;&#x3002; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;0&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;SOCKET_ERROR 1int listen(SOCKET s, int backlog); s&#xFF1A;socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; backlog&#xFF1A;&#x8BF7;&#x6C42;&#x8FDE;&#x63A5;&#x961F;&#x5217;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x3002; 1int accept(SOCKET s, struct sockaddr *addr, int *addrlen); s&#xFF1A;socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; addr&#xFF1A;SOCKADDR&#x7C7B;&#x578B;&#x7684;&#x6307;&#x9488;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF0C;&#x5C06;SOCKADDR_IN&#x8F6C;&#x6210;SOCKADDR&#x3002; addrlen&#xFF1A;addr&#x7684;&#x957F;&#x5EA6;&#x3002; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x6307;&#x5411;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x5957;&#x63A5;&#x5B57;&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;INVALID_SOCKET 1int connect(SOCKET s, const struct sockaddr *name, int namelen); s&#xFF1A;socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; name&#xFF1A;SOCKADDR&#x7C7B;&#x578B;&#x7684;&#x6307;&#x9488;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF0C;&#x5C06;SOCKADDR_IN&#x8F6C;&#x6210;SOCKADDR&#x3002; namelen&#xFF1A;name&#x7684;&#x957F;&#x5EA6;&#x3002; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;0&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;SOCKET_ERROR 1int closesocket(SOCKET s); s&#xFF1A;&#x8981;&#x65AD;&#x5F00;&#x7684;socket&#x5957;&#x63A5;&#x5B57; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;0&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;SOCKET_ERROR&#x3002; 1int shutdonw(SOCKET s, int how); s&#xFF1A;&#x8981;&#x65AD;&#x5F00;&#x7684;socket&#x5957;&#x63A5;&#x5B57; how&#xFF1A;&#x65AD;&#x5F00;&#x65B9;&#x5F0F;&#x3002;SD_RECEIVE&#xFF1A;&#x65AD;&#x5F00;&#x8F93;&#x5165;&#x6D41;&#xFF1B;SD_SEND&#xFF1A;&#x65AD;&#x5F00;&#x8F93;&#x51FA;&#x6D41;&#xFF1B;SD_BOTH&#xFF1A;&#x540C;&#x65F6;&#x65AD;&#x5F00;I/O&#x6D41;&#x3002; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;0&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;SOCKET_ERROR&#x3002; TCP&#x6570;&#x636E;&#x4F20;&#x8F93;I/O&#x51FD;&#x6570;1int send(SOCKET s, const char *buf, int len, int flags); s&#xFF1A;socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; buf&#xFF1A;&#x53D1;&#x9001;&#x7684;&#x6570;&#x636E;&#x5185;&#x5BB9; len&#xFF1A;&#x53D1;&#x9001;&#x6570;&#x636E;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6; flags&#xFF1A;&#x6807;&#x8BC6;&#xFF0C;&#x9ED8;&#x8BA4;0&#x5373;&#x53EF; return&#xFF1A;&#x53D1;&#x9001;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x53D1;&#x9001;&#x4E2A;&#x6570; 1int recv(SOCKET s, const char *buf, int len, int flags); s&#xFF1A;socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; buf&#xFF1A;&#x63A5;&#x6536;&#x6570;&#x636E;&#x5B58;&#x653E;&#x7684;&#x6570;&#x7EC4; len&#xFF1A;&#x63A5;&#x6536;&#x6570;&#x636E;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6; flags&#xFF1A;&#x6807;&#x8BC6;&#xFF0C;&#x9ED8;&#x8BA4;0&#x5373;&#x53EF; return&#xFF1A;&#x63A5;&#x6536;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x5B9E;&#x9645;&#x63A5;&#x6536;&#x4E2A;&#x6570; UDP&#x6570;&#x636E;&#x4F20;&#x8F93;I/O&#x51FD;&#x6570;UDP&#x8FDE;&#x63A5;&#x4E0D;&#x9700;&#x8981;&#x786E;&#x8BA4;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x53D1;&#x9001;&#x6570;&#x636E;12#include &lt;WinSock2.h&gt;int sendto(SOCKET s, const char * buf, int len, int flags, const struct sockaddr * to, int tolen); s:socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; buf&#xFF1A;&#x5F85;&#x53D1;&#x9001;&#x6570;&#x636E;&#x5185;&#x5BB9; len&#xFF1A;&#x5F85;&#x4F20;&#x8F93;&#x7684;&#x6570;&#x636E;&#x957F;&#x5EA6;&#xFF0C;&#x4EE5;&#x5B57;&#x8282;&#x4E3A;&#x5355;&#x4F4D; flags&#xFF1A;&#x6807;&#x8BC6;&#xFF0C;&#x9ED8;&#x8BA4;0&#x5373;&#x53EF; to&#xFF1A;&#x5B58;&#x6709;&#x76EE;&#x6807;&#x5730;&#x5740;&#x7684;SOCKADDR&#x7ED3;&#x6784;&#x4F53;&#x53D8;&#x91CF;&#x5730;&#x5740;&#x503C; tolen&#xFF1A;to&#x5730;&#x5740;&#x503C;&#x7ED3;&#x6784;&#x4F53;&#x53D8;&#x91CF;&#x957F;&#x5EA6; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x4F20;&#x8F93;&#x5B57;&#x8282;&#x6570;&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;-1 1int recvfrom(SOCKET s, const char * buf, int len, int flags, const struct sockaddr * from, int *fromlen); s:socket&#x8FD4;&#x56DE;&#x7684;&#x5957;&#x63A5;&#x5B57; buf&#xFF1A;&#x5F85;&#x63A5;&#x6536;&#x6570;&#x636E;&#x7684;&#x6570;&#x7EC4; len&#xFF1A;&#x53EF;&#x63A5;&#x53D7;&#x7684;&#x6570;&#x636E;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6; flags&#xFF1A;&#x6807;&#x8BC6;&#xFF0C;&#x9ED8;&#x8BA4;0&#x5373;&#x53EF; from&#xFF1A;&#x5B58;&#x6709;&#x53D1;&#x9001;&#x7AEF;&#x5730;&#x5740;&#x7684;SOCKADDR&#x7ED3;&#x6784;&#x4F53;&#x53D8;&#x91CF;&#x5730;&#x5740;&#x503C; fromlen&#xFF1A;from&#x5730;&#x5740;&#x503C;&#x7ED3;&#x6784;&#x4F53;&#x53D8;&#x91CF;&#x6307;&#x9488;&#x957F;&#x5EA6; return&#xFF1A;&#x6210;&#x529F;&#x8FD4;&#x56DE;&#x4F20;&#x8F93;&#x5B57;&#x8282;&#x6570;&#xFF0C;&#x5931;&#x8D25;&#x8FD4;&#x56DE;-1 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>windows socket编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[aplayer-给博文添加音乐]]></title>
    <url>%2F2018%2F11%2F18%2FplayMusic%2F</url>
    <content type="text"><![CDATA[aplayer&#x7684;&#x5B89;&#x88C5;&#x548C;&#x914D;&#x7F6E;&#x5B89;&#x88C5;aplayer&#x5728;&#x535A;&#x5BA2;&#x76EE;&#x5F55;&#x4E0B;&#x8FD0;&#x884C; 1$ npm install hexo-tag-aplayer --save &#x7528;&#x6CD5;1{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %} &#x9009;&#x9879;&#x4ECB;&#x7ECD; title: &#x97F3;&#x4E50;&#x6807;&#x9898; author: &#x97F3;&#x4E50;&#x4F5C;&#x8005; url: &#x97F3;&#x4E50;&#x6587;&#x4EF6;&#x7684;url picture_url: &#x53EF;&#x9009;&#x9879;&#xFF0C;&#x97F3;&#x4E50;&#x56FE;&#x7247;&#x7684;url narrow: &#x53EF;&#x9009;&#x9879;&#xFF0C;&#x8BBE;&#x7F6E;&#x4E3A;&#x5C0F;&#x578B;&#x7684;&#x98CE;&#x683C; autoplay:&#x53EF;&#x9009;&#x9879;&#xFF0C;&#x8BBE;&#x7F6E;&#x81EA;&#x52A8;&#x64AD;&#x653E; width: &#x53EF;&#x9009;&#x9879;&#xFF0C;&#x8BBE;&#x7F6E;&#x64AD;&#x653E;&#x5668;ui&#x7684;&#x5BBD;&#x5EA6;&#xFF0C;&#x9ED8;&#x8BA4;&#x662F;100% lrc: &#x53EF;&#x9009;&#x9879;&#xFF0C;&#x8BBE;&#x7F6E;&#x6B4C;&#x8BCD; &#x5173;&#x4E8E;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x7684;&#x5B58;&#x653E;&#x548C;&#x914D;&#x7F6E;&#xFF0C;&#x8BF7;&#x67E5;&#x9605;&#x5B98;&#x65B9;&#x6587;&#x6863;&#x3002; &#x914D;&#x7F6E;&#x4F8B;&#x5B50;&#xFF1A;1{% aplayer &quot;Minecraft&quot; &quot;C418&quot; &quot;Minecraft.mp3&quot; &quot;Minecraft.jpg&quot; &quot;lrc:Minecraft.txt&quot; %} var ap = new APlayer({ element: document.getElementById("aplayer-UgfRykZi"), narrow: false, autoplay: false, showlrc: false, music: { title: "Minecraft", author: "C418", url: "Minecraft.mp3", pic: "/2018/11/18/playMusic/Minecraft.jpg", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); &#x5355;&#x72EC;&#x914D;&#x7F6E;&#x6B4C;&#x8BCD;&#x7528;aplayerlrc&#x663E;&#x793A;&#x6B4C;&#x8BCD;&#x3002; 123{% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %}[00:00.00]lrc here{% endaplayerlrc %} &#x64AD;&#x653E;&#x5217;&#x8868;&#x914D;&#x7F6E;&#x7528;aplayerlist&#x914D;&#x7F6E;&#x64AD;&#x653E;&#x5217;&#x8868;&#x3002; 123456789101112131415161718192021222324252627{% aplayerlist %}{ &quot;narrow&quot;: false, // &#x53EF;&#x9009;&#x9879;,&#x5C0F;&#x7A97;&#x98CE;&#x683C; &quot;autoplay&quot;: true, // &#x53EF;&#x9009;&#x9879;, &#x81EA;&#x52A8;&#x64AD;&#x653E;&#x6B4C;&#x66F2;,&#x4E0D;&#x652F;&#x6301;&#x624B;&#x673A;&#x6D4F;&#x89C8;&#x5668; &quot;mode&quot;: &quot;random&quot;, // &#x53EF;&#x9009;&#x9879;,&#x64AD;&#x653E;&#x6A21;&#x5F0F;&#x9009;&#x62E9;&#xFF0C;&#x503C;&#x53C2;: `random` `single` `circulation`(loop) `order`(no loop), &#x9ED8;&#x8BA4;: `circulation` &quot;showlrc&quot;: 3, // &#x53EF;&#x9009;&#x9879;, &#x663E;&#x793A;&#x6B4C;&#x8BCD;, &#x6709; 1, 2, 3 &quot;mutex&quot;: true, // &#x53EF;&#x9009;&#x9879;, &#x53EA;&#x5141;&#x8BB8;&#x64AD;&#x653E;&#x4E00;&#x9996;&#x6B4C; &quot;theme&quot;: &quot;#e6d0b2&quot;, // &#x53EF;&#x9009;&#x9879;, &#x8BBE;&#x7F6E;&#x989C;&#x8272;, &#x9ED8;&#x8BA4;: #b7daff &quot;preload&quot;: &quot;metadata&quot;, // &#x53EF;&#x9009;&#x9879;, &#x52A0;&#x8F7D;&#x6B4C;&#x66F2;&#x7684;&#x65B9;&#x5F0F;, &#x503C;&#x53C2;: &apos;none&apos; &apos;metadata&apos; &apos;auto&apos;, &#x9ED8;&#x8BA4;: &apos;auto&apos; &quot;listmaxheight&quot;: &quot;600px&quot;, // &#x53EF;&#x9009;&#x9879;, &#x64AD;&#x653E;&#x5217;&#x8868;&#x7684;&#x6700;&#x5927;&#x9AD8;&#x5EA6; &quot;music&quot;: [ { &quot;title&quot;: &quot;Music1&quot;, &quot;author&quot;: &quot;Author1&quot;, &quot;url&quot;: &quot;Music1.mp3&quot;, &quot;pic&quot;: &quot;Music1.jpeg&quot;, &quot;lrc&quot;: &quot;Music1.txt&quot; }, { &quot;title&quot;: &quot;Music2&quot;, &quot;author&quot;: &quot;Author2&quot;, &quot;url&quot;: &quot;Music2.mp3&quot;, &quot;pic&quot;: &quot;Music2.jpg&quot; } ]}{% endaplayerlist %} console.error("SyntaxError: Unexpected token } in JSON at position 403"); v &#x66F4;&#x591A; Windows&#x6570;&#x636E;&#x7C7B;&#x578B; &#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B; &#x8BF4;&#x660E; CHAR char BYTE unsigned char BOOL int &#x5E03;&#x5C14;&#x7C7B;&#x578B;&#xFF0C;TRUE &amp; FALSE INT int LONG long 32&#x4F4D;&#x957F;&#x6574;&#x578B; WORD unsigned short 16&#x4F4D;&#x5B57;&#x7C7B;&#x578B; DWORD unsigned long LPARAM long 64&#x4F4D;&#x6D88;&#x606F;&#x53C2;&#x6570;&#x7C7B;&#x578B; WPARAM unsigned int 64&#x4F4D;&#x6D88;&#x606F;&#x53C2;&#x6570;&#x7C7B;&#x578B; LPCSTR const char* &#x5B57;&#x7B26;&#x4E32;&#x5E38;&#x91CF;&#x6307;&#x9488;&#x7C7B;&#x578B; LPSTR char* &#x5B57;&#x7B26;&#x4E32;&#x6307;&#x9488;&#x7C7B;&#x578B; LPVOID void* &#x7A7A;&#x6307;&#x9488; LRESULT long 32&#x4F4D;&#x6D88;&#x606F;&#x5904;&#x7406;&#x7ED3;&#x679C;&#x7C7B;&#x578B; SHORT short 16&#x4F4D;&#x77ED;&#x6574;&#x578B; UINT unsigned int 32&#x4F4D;&#x65E0;&#x7B26;&#x53F7;&#x6574;&#x578B; WCHAR unsigned short 16&#x4F4D;&#x5BBD;&#x5B57;&#x7B26;&#x7C7B;&#x578B; |COLORREF|DWORD document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>aplayer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux一键搭建KMS激活服务器激活Windows和Office]]></title>
    <url>%2F2018%2F11%2F12%2Fkms-script%2F</url>
    <content type="text"><![CDATA[Linux &#x5FEB;&#x901F;&#x642D;&#x5EFA; KMS &#x6FC0;&#x6D3B;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x8BA9; PC &#x6FC0;&#x6D3B; Windows &#x548C; Office &#x5E76;&#x81EA;&#x52A8;&#x7EED;&#x671F;&#xFF0C;&#x544A;&#x522B;&#x7F51;&#x4E0A;&#x7684;&#x6765;&#x8DEF;&#x4E0D;&#x660E;&#x7684;&#x6FC0;&#x6D3B;&#x5DE5;&#x5177;&#xFF0C;&#x9632;&#x6B62;&#x610F;&#x5916;&#x4E2D;&#x6BD2;&#x3002; One key KMS&#x867D;&#x7136;&#x76EE;&#x524D;&#x5DF2;&#x7ECF;&#x6709;&#x5404;&#x79CD; PC &#x7528;&#x7684; KMS &#x6FC0;&#x6D3B;&#x7A0B;&#x5E8F;&#xFF0C;&#x4F8B;&#x5982;KMSAuto&#x6216;&#x8005;KMS VL ALL&#x4E4B;&#x7C7B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x4ED6;&#x4EEC;&#x90FD;&#x4F1A;&#x88AB; Windows Defender &#x6216;&#x8005;&#x666E;&#x901A;&#x7684;&#x6740;&#x6BD2;&#x8F6F;&#x4EF6;&#x8BA4;&#x4E3A;&#x662F;&#x75C5;&#x6BD2;&#x3002;&#x867D;&#x7136;&#x4F60;&#x201C;&#x76F8;&#x4FE1;&#x201D;&#x8FD9;&#x4E9B;&#x8F6F;&#x4EF6;&#x88AB;&#x62A5;&#x6BD2;&#x662F;&#x5F88;&#x6B63;&#x5E38;&#x7684;&#xFF0C;&#x76F4;&#x63A5;&#x52A0;&#x5165;&#x767D;&#x540D;&#x5355;&#x4E86;&#x4E8B;&#xFF0C;&#x7136;&#x800C;&#x4F60;&#x786E;&#x5B9E;&#x4E0D;&#x77E5;&#x9053;&#x4F60;&#x4ECE;&#x7F51;&#x4E0A;&#x641C;&#x7D22;&#x4E0B;&#x8F7D;&#x7684;&#x8FD9;&#x4E9B;&#x6FC0;&#x6D3B;&#x7A0B;&#x5E8F;&#x662F;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x7ECF;&#x8FC7;&#x522B;&#x4EBA;&#x7684;&#x6539;&#x9020;&#x690D;&#x5165;&#x4E86;&#x75C5;&#x6BD2;&#x2026;&#x2026; &#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x81EA;&#x5DF1;&#x7684; Linux VPS &#x642D;&#x5EFA; KMS &#x6FC0;&#x6D3B;&#x670D;&#x52A1;&#x5668;&#x7ED9;&#x81EA;&#x5DF1;&#x7684; PC &#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x6837;&#x65E2;&#x5B89;&#x5168;&#x65E0;&#x6BD2;&#x53C8;&#x4E0D;&#x6015;&#x6FC0;&#x6D3B;&#x4E22;&#x5931;&#x3002; &#x642D;&#x5EFA;KMS&#x670D;&#x52A1;one-key-KMS&#x5730;&#x5740; 1.&#x4E0B;&#x8F7D;one-key-kms&#x811A;&#x672C;&#xFF0C;&#x5E76;&#x5B89;&#x88C5;&#x6E90;&#x7801; CentOS / Redhat / Fedora 1wget https://raw.githubusercontent.com/dakkidaze/one-key-kms/master/one-key-kms-centos.sh &amp;&amp; chmod +x one-key-kms-centos.sh &amp;&amp;./one-key-kms-centos.sh Debian / Ubuntu / Mint 1wget https://raw.githubusercontent.com/dakkidaze/one-key-kms/master/one-key-kms-debian.sh &amp;&amp; chmod +x one-key-kms-debian.sh &amp;&amp; ./one-key-kms-debian.sh &#x672C;&#x4EBA;&#x91C7;&#x7528;Ubuntu&#x7CFB;&#x7EDF;&#x8FDB;&#x884C;&#x5B89;&#x88C5;&#xFF0C;&#x5B89;&#x88C5;&#x65F6;&#x6700;&#x597D;&#x5177;&#x6709;root&#x6743;&#x9650;&#xFF0C;&#x4EE5;&#x514D;&#x6743;&#x9650;&#x4E0D;&#x8DB3;&#x62A5;&#x9519;&#x3002; 2.&#x5C06;&#x5B8C;&#x6210;&#x4E0B;&#x8F7D;&#x540E;&#x7684;vlmcsd&#x6587;&#x4EF6;&#x5939;&#x653E;&#x5165;&#x5230;/usr/local/&#xFF0C;&#x5C31;&#x80FD;&#x591F;&#x5728;&#x4EFB;&#x4F55;&#x4F4D;&#x7F6E;&#x6267;&#x884C;kms.sh&#x3002; 3.&#x4E0B;&#x8F7D;kms&#x811A;&#x672C; 1wget https://raw.githubusercontent.com/dakkidaze/one-key-kms/master/kms.sh &amp;&amp; chmod +x kms.sh &#x4E0B;&#x8F7D;&#x540E;&#xFF0C;&#x6253;&#x5F00;kms.sh&#xFF0C;&#x66F4;&#x6539;DAEMON&#x7684;&#x8DEF;&#x5F84;&#x4E3A;=&#x5B58;&#x653E;vlmcsd&#x7684;&#x6839;&#x76EE;&#x5F55;/vlmcsd/bin/vlmcd 4.&#x811A;&#x672C;&#x8FD0;&#x884C; &#x8FD0;&#x884C;&#x53C2;&#x6570;&#x542F;&#x52A8;&#x811A;&#x672C;:./kms.sh start&#x505C;&#x6B62;&#x811A;&#x672C;:./kms.sh stop&#x91CD;&#x542F;&#x811A;&#x672C;:./kms.sh restart&#x67E5;&#x770B;&#x8FD0;&#x884C;&#x72B6;&#x6001;:./kms.sh status 5.&#x6253;&#x5F00;1668&#x7AEF;&#x53E3; CentOS / Redhat / Fedora iptables -I INPUT -p tcp &#x2013;dport 1688 -j ACCEPT Debian / Ubuntu / Mint sudo ufw allow 1688 &#x6FC0;&#x6D3B;Windows&#x4EE5;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;&#x8FD0;&#x884C;cmd&#x6216;&#x8005;PowerShell&#xFF0C;&#x8F93;&#x5165;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;1234cd /d &quot;%SystemRoot%\system32&quot;slmgr /skms &#x4F60;&#x7684;KMS&#x670D;&#x52A1;&#x7AEF;&#x4E3B;&#x673A;&#x7684;IP&#x6216;&#x8005;&#x57DF;&#x540D;slmgr /atoslmgr /xpr &#x5F39;&#x51FA;&#x7A97;&#x53E3;&#x540E;&#x8868;&#x793A;&#x6FC0;&#x6D3B;&#x6210;&#x529F;&#x3002;&#x6BCF;&#x8FC7; 180 &#x5929;&#xFF0C;&#x7CFB;&#x7EDF;&#x90FD;&#x4F1A;&#x81EA;&#x52A8;&#x4E0E;&#x4F60;&#x7684; KMS &#x670D;&#x52A1;&#x5668;&#x901A;&#x4FE1;&#x6765;&#x6FC0;&#x6D3B; Windows&#xFF0C;&#x53EA;&#x8981;&#x5230;&#x65F6;&#x5019;&#x4F60;&#x7684; KMS &#x670D;&#x52A1;&#x5668;&#x8FD8;&#x5728;&#xFF0C;Windows &#x5C31;&#x80FD;&#x7EE7;&#x7EED;&#x6FC0;&#x6D3B;&#x3002;&#x6CE8;&#x610F;&#xFF1A;Linux&#x670D;&#x52A1;&#x5F00;&#x542F;&#x7684;&#x65F6;&#x5019;&#x624D;&#x80FD;&#x8FDB;&#x884C;&#x6FC0;&#x6D3B;&#xFF0C;&#x4E0D;&#x7136;&#x62A5;&#x5404;&#x79CD;ERROR &#x6FC0;&#x6D3B;Office&#x4EE5;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;&#x8FD0;&#x884C;cmd&#x6216;&#x8005;PowerShell&#xFF0C;&#x8F93;&#x5165;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;1234# &#x9ED8;&#x8BA4;&#x8DEF;&#x5F84;&#x662F;&#x4EE5;&#x4E0B;&#x8DEF;&#x5F84;&#xFF0C;&#x81EA;&#x5B9A;&#x4E49;&#x5B89;&#x88C5;&#x627E;&#x5230;&#x76F8;&#x5E94;&#x7684;ospp.vbs&#x5373;&#x53EF;cd &quot;C:\Program Files\Microsoft Office\Office16&quot;cscript ospp.vbs /sethst:&#x4F60;&#x7684;KMS&#x670D;&#x52A1;&#x7AEF;&#x4E3B;&#x673A;&#x7684;IP&#x6216;&#x8005;&#x57DF;&#x540D;cscript ospp.vbs /act &#x6210;&#x529F;&#x7684;&#x8BDD;&#x4F1A;&#x62A5;Successful &#x5F00;&#x673A;&#x81EA;&#x542F;&#x52A8;&#x5982;&#x679C;&#x53EA;&#x662F;&#x60F3;&#x7B80;&#x5355;&#x7684;&#x8BA9; KMS &#x670D;&#x52A1;&#x5728; Linux &#x4E0A;&#x5F00;&#x673A;&#x81EA;&#x542F;&#xFF0C;&#x90A3;&#x4E48;&#x7F16;&#x8F91;/etc/rc.local&#x6587;&#x4EF6;&#xFF0C;&#x5728;exit 0&#xFF08;&#x5982;&#x679C;&#x6709;&#xFF09;&#x524D;&#x9762;&#x52A0;&#x4E0A;&#x4E00;&#x53E5;12#(shell dir)&#x4E3A;&#x8BE5;&#x811A;&#x672C;&#x5B58;&#x653E;&#x7684;&#x76EE;&#x5F55;(shell dir)/kms.sh start &#x672C;&#x6587;&#x8F6C;&#x8F7D;&#x81EA;&#x795E;&#x4EE3;&#x7EEE;&#x51DB;&#x5982;&#x6709;&#x95EE;&#x9898;&#xFF0C;&#x8BF7;&#x8054;&#x7CFB;&#x90AE;&#x7BB1;cginmax1998@gmail.com document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>搬运</category>
        <category>脚本</category>
        <category>kms</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>kms VL激活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++的输入输出流操作符的重载]]></title>
    <url>%2F2018%2F11%2F12%2FioStreamOperatorOfC%2B%2B%2F</url>
    <content type="text"><![CDATA[&#x5728;C++&#x4E2D;&#xFF0C;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x91CD;&#x8F7D;&#x4E00;&#x4E9B;&#x7279;&#x5B9A;&#x7684;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x8BA9;&#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x5177;&#x6709;&#x8DDF;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x4E00;&#x81F4;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x64CD;&#x4F5C;&#x3002; &#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x7684;&#x57FA;&#x672C;&#x6A21;&#x578B; &#x7C7B;&#x5185;&#x90E8;&#x91CD;&#x8F7D; &#x7C7B;&#x5916;&#x90E8;&#x91CD;&#x8F7D; &#x4E0D;&#x540C;&#x70B9;&#x548C;&#x539F;&#x56E0; &#x81EA;&#x5B9A;&#x4E49;&#x7C7B;&#x7684;&#x57FA;&#x672C;&#x6A21;&#x578B;&#x7528;&#x6A21;&#x677F;&#x7C7B;&#x66F4;&#x52A0;&#x76F4;&#x89C2;&#x7684;&#x53D1;&#x73B0;&#x95EE;&#x9898;&#x7684;&#x6240;&#x5728;&#x3002; 12345678910111213template&lt;class T&gt;class Table{public: Table(); T getData(); ~Table(); //...private: T width; T height; T length;}; &#x7C7B;&#x5185;&#x90E8;&#x91CD;&#x8F7D;&#x5728;&#x7C7B;&#x5185;&#x90E8;&#x6DFB;&#x52A0;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x6D41;&#x64CD;&#x4F5C;&#x7B26;&#x91CD;&#x8F7D;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x53CB;&#x5143;friend 12345678910111213141516171819template&lt;class T&gt;class Table{public: Table(); T getData(); ~Table(); friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Table&lt;T&gt;&amp; t) { //&#x80FD;&#x591F;&#x8BBF;&#x95EE;&#x5230;&#x5185;&#x90E8;private&#x6210;&#x5458; return os &lt;&lt; t.width &lt;&lt; &quot; &quot; &lt;&lt; t.height &lt;&lt; &quot; &quot; &lt;&lt; t.length; } //...private: T width; T height; T length;}; &#x7C7B;&#x5916;&#x90E8;&#x91CD;&#x8F7D;&#x7C7B;&#x5916;&#x90E8;&#x91CD;&#x8F7D;&#x65F6;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x53CB;&#x5143;&#xFF0C;&#x4F46;&#x9700;&#x8981;&#x58F0;&#x660E;&#x4E3A;&#x6A21;&#x677F;&#x51FD;&#x6570;&#x3002; 12345678910111213141516171819202122template&lt;class T&gt;class Table{public: Table(); T getData(); ~Table(); //...private: T width; T height; T length;}//&#x8F93;&#x51FA;&#x6D41;&#x91CD;&#x8F7D;template&lt;class T&gt;std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, Table&lt;T&gt;&amp; t){ //&#x4E0D;&#x80FD;&#x8BBF;&#x95EE;private&#x6210;&#x5458; //return os &lt;&lt; t.width &lt;&lt; &quot; &quot; &lt;&lt; t.height &lt;&lt; &quot; &quot; &lt;&lt; t.length; return os &lt;&lt; t.getData();} &#x4E0D;&#x540C;&#x70B9;&#x548C;&#x539F;&#x56E0;&#x5728;&#x7C7B;&#x5185;&#x90E8;&#x5B9A;&#x4E49;&#x65F6;&#xFF0C;&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x4E3A;&#x53CB;&#x5143;&#xFF0C;&#x7C7B;&#x624D;&#x80FD;&#x53BB;&#x8BC6;&#x522B;&#x8BE5;&#x91CD;&#x8F7D;&#x51FD;&#x6570;&#x662F;&#x5185;&#x90E8;&#x6210;&#x5458;&#x51FD;&#x6570;&#x3002; &#x5728;&#x7C7B;&#x5916;&#x90E8;&#x5B9A;&#x4E49;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x629B;&#x5F00;&#x53CB;&#x5143;&#x5C5E;&#x6027;&#xFF0C;&#x53D6;&#x800C;&#x4EE3;&#x4E4B;&#x7684;&#x662F;&#x51FD;&#x6570;&#x6A21;&#x677F;&#x58F0;&#x660E;&#xFF0C;&#x6BD5;&#x7ADF;&#x7C7B;&#x4E0D;&#x80FD;&#x8BC6;&#x522B;&#x4E3A;&#x5B83;&#x5185;&#x90E8;&#x6210;&#x5458;&#x51FD;&#x6570;&#x3002;&#x5728;&#x7C7B;&#x5916;&#x5B9A;&#x4E49;&#x7684;&#x91CD;&#x8F7D;&#x51FD;&#x6570;&#x662F;&#x4E0D;&#x80FD;&#x8C03;&#x7528;&#x5185;&#x90E8;private&#x6210;&#x5458;&#x7684;&#xFF0C;&#x8981;&#x5728;&#x7C7B;&#x5185;&#x90E8;&#x5B9A;&#x4E49;&#x516C;&#x5171;&#x8C03;&#x7528;&#x63A5;&#x53E3;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>C++</tag>
        <tag>操作符重载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建详解（Windows和Mac通用版）]]></title>
    <url>%2F2018%2F11%2F10%2Fbuild-blog%2F</url>
    <content type="text"><![CDATA[Hexo &#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;nodejs &#x7684;&#x9759;&#x6001;&#x535A;&#x5BA2;&#x7F51;&#x7AD9;&#x751F;&#x6210;&#x5668;&#xFF0C;&#x4F5C;&#x8005;&#x662F;&#x6765;&#x81EA;&#x53F0;&#x6E7E;&#x7684; Tommy Chen document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>实用技术</category>
        <category>个人博客</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于github的个人博客]]></title>
    <url>%2F2018%2F11%2F9%2FREADME1%2F</url>
    <content type="text"><![CDATA[&#x5EFA;&#x7AD9;&#x539F;&#x56E0;&#x6700;&#x8FD1;&#x65E0;&#x804A;&#xFF0C;&#x778E;&#x6BD4;&#x901B;&#x4E86;&#x51E0;&#x4E2A;&#x5927;&#x4F6C;&#x7684;&#x535A;&#x5BA2;&#xFF08;&#x90FD;&#x662F;&#x4E8C;&#x6B21;&#x5143;&#x7537;(&#x25CF;&#x2C7;&#x2200;&#x2C7;&#x25CF;)&#xFF09;&#xFF0C;&#x53D1;&#x73B0;&#x90FD;&#x662F;&#x540C;&#x4E00;&#x7C7B;&#x578B;&#x7684;&#x535A;&#x5BA2;&#x7C7B;&#x578B;&#xFF0C;&#x5BFB;&#x601D;&#x7740;&#x8FD9;&#x4E1C;&#x897F;&#x7EDD;&#x58C1;&#x6709;&#x522B;&#x4EBA;&#x505A;&#x597D;&#x7684;&#x6846;&#x67B6;&#xFF0C;&#x6240;&#x4EE5;google/baidu&#x4E00;&#x4E0B;&#x3002;&#x53D1;&#x73B0;&#x5185;&#x5BB9;&#x5F88;&#x4E30;&#x5BCC;&#xFF0C;&#x571F;&#x8C6A;&#x7C7B;&#x7684;wordpress&#x6216;&#x8005;adobe&#x7684;protfolio&#xFF0C;&#x7A77;&#x4EBA;&#x7C7B;&#x7684;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x662F;&#x57FA;&#x4E8E;git&#x4ED3;&#x5E93;&#x6765;&#x642D;&#x5EFA;&#x3002;&#x5F88;&#x660E;&#x663E;&#x6211;&#x9009;&#x62E9;&#x4E86;github&#xFF08;&#x5FAE;&#x7B11;&#xFF09;&#x3002; &#x5EFA;&#x7AD9;&#x6982;&#x62EC;&#x7528;&#x7684;&#x662F;hexo&#x548C;github&#x7ED3;&#x5408;&#x5EFA;&#x51FA;&#x6765;&#x7684;&#x3002;&#x4EE5;gitHub&#x7684;&#x4ED3;&#x5E93;&#x4F5C;&#x4E3A;&#x57DF;&#x540D;&#xFF0C;Hexo&#x91CC;&#x9762;&#x7684;js&#x529F;&#x80FD;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#x548C;&#x88C5;&#x9970;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x641E;&#x51FA;&#x8FD9;&#x4E48;&#x4E2A;&#x4E1C;&#x897F;&#x3002;&#x6709;&#x5174;&#x8DA3;&#x7684;&#x670B;&#x53CB;&#x770B;&#x770B;&#x8FD9;&#x91CC; Hexo &#x662F;&#x4E00;&#x4E2A;&#x57FA;&#x4E8E;nodejs &#x7684;&#x9759;&#x6001;&#x535A;&#x5BA2;&#x7F51;&#x7AD9;&#x751F;&#x6210;&#x5668;&#xFF0C;&#x4F5C;&#x8005;&#x662F;&#x6765;&#x81EA;&#x53F0;&#x6E7E;&#x7684; Tommy Chen&#x3002; &#x611F;&#x60F3;&#x63A5;&#x89E6;&#x4E4B;&#x524D;&#x6CA1;&#x4E86;&#x89E3;&#x8FC7;&#x7684;&#x4E1C;&#x897F;&#x611F;&#x89C9;&#x975E;&#x5E38;&#x597D;&#x73A9;&#xFF0C;&#x4E0A;&#x624B;&#x4E5F;&#x5FEB;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x8DDF;&#x522B;&#x4EBA;&#x88C5;b&#x3002;&#x4E3B;&#x8981;&#x662F;&#x81EA;&#x5DF1;&#x4E4B;&#x524D;&#x5B66;&#x8FC7;markdown&#x3001;git&#x7B49;&#x7B49;&#x6742;&#x4E03;&#x6742;&#x516B;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x5927;&#x90E8;&#x5206;&#x547D;&#x4EE4;&#x5F88;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#xFF0C;&#x5728;windows&#x4E0B;&#x642D;&#x5EFA;&#x5B8C;&#x4E4B;&#x540E;&#xFF0C;&#x8DD1;&#x5230;Linux&#x4E0B;&#x518D;&#x642D;&#x5EFA;&#x4E00;&#x904D;&#xFF0C;&#x591A;&#x719F;&#x6089;&#x4E00;&#x4E0B;&#x64CD;&#x4F5C;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x77E5;&#x9053;&#x4E3A;&#x4EC0;&#x4E48;&#xFF0C;&#x611F;&#x89C9;&#x641E;&#x8FD9;&#x4E1C;&#x897F;&#x7279;&#x522B;&#x723D;&#x1F602;&#x3002;&#x4EE5;&#x540E;&#x535A;&#x5BA2;&#x91CC;&#x9762;&#x4E3B;&#x8981;&#x53D1;&#x5E03;&#x5B66;&#x4E60;&#x8BA1;&#x7B97;&#x673A;&#x3001;&#x7F16;&#x7A0B;&#x7C7B;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x5439;&#x6C34;&#x3001;&#x7262;&#x9A9A;&#x4E4B;&#x7C7B;&#x7684;&#x5C31;&#x4E0D;&#x5728;&#x6709;&#x4E86;&#xFF0C;&#x8981;&#x8BA9;&#x8FD9;&#x4E2A;&#x5783;&#x573E;&#x7B80;&#x5355;&#x535A;&#x5BA2;&#x66F4;&#x52A0;&#x5145;&#x5B9E;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>吹水</tag>
        <tag>闲聊</tag>
      </tags>
  </entry>
</search>
